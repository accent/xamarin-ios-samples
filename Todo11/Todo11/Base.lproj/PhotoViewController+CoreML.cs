// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Collections.Generic;
using Foundation;
using UIKit;
using CoreImage;
using System.Linq;
using System.Threading.Tasks;
using CoreFoundation;

namespace Todo11App
{
    public partial class PhotoViewController 
    {
        MachineLearningModel model;

        private void ShowAlert(string title, string message)
        {
            var okAlertController = UIAlertController.Create(title, message, UIAlertControllerStyle.Alert);
            okAlertController.AddAction(UIAlertAction.Create("OK", UIAlertActionStyle.Default, (_) => { }));
            InvokeOnMainThread(() => PresentViewController(okAlertController, true, () => { }));
        }

        void ShowMessage(string msg)
        {
            InvokeOnMainThread(() => ClassificationLabel.Text = msg);
        }

        private void ShowImage(UIImage img)
        {
            InvokeOnMainThread(() => ImageView.Image = img);
        }

        void ClassifyImageAsync(UIImage img)
        {
            Task.Run(() => model.Classify(img));
        }

        void ShowPrediction(ImageDescriptionPrediction imageDescriptionPrediction)
        {
            //Grab the first 5 predictions, format them for display, and show 'em
            InvokeOnMainThread(() =>
            {
                var message = $"{imageDescriptionPrediction.ModelName} thinks:\n";
                var topFive = imageDescriptionPrediction.predictions.Take(5);
                foreach (var prediction in topFive)
                {
                    var prob = prediction.Item1;
                    var desc = prediction.Item2;
                    message += $"{desc} : {prob.ToString("P") }\n";
                }

                ShowMessage(message);
            });
        }
    }

    class ImagePickerControllerDelegate : UIImagePickerControllerDelegate
    {
        public event EventHandler<EventArgsT<String>> MessageUpdated = delegate { };
        public event EventHandler<EventArgsT<String>> ErrorOccurred = delegate { };
        public event EventHandler<EventArgsT<CIImage>> ImagePicked = delegate { };

        public override void FinishedPickingMedia(UIImagePickerController picker, NSDictionary info)
        {
            // Close the picker
            picker.DismissViewController(true, null);

            MessageUpdated(this, new EventArgsT<string>("Analyzing image..."));

            // Read Image from returned data
            var uiImage = info[UIImagePickerController.OriginalImage] as UIImage;
            if (uiImage == null)
            {
                ErrorOccurred(this, new EventArgsT<string>("Unable to read image from picker."));
                return;
            }

            // Convert to CIImage
            var ciImage = new CIImage(uiImage);
            if (ciImage == null)
            {
                ErrorOccurred(this, new EventArgsT<string>("Unable to create required CIImage from UIImage."));
                return;
            }
            var inputImage = ciImage.CreateWithOrientation(uiImage.Orientation.ToCIImageOrientation());

            ImagePicked(this, new EventArgsT<CIImage>(inputImage));

        }
    }
}
