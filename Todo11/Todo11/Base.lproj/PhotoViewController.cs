// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Collections.Generic;
using Foundation;
using UIKit;
using CoreImage;
using System.Linq;
using System.Threading.Tasks;
using CoreFoundation;

namespace Todo11App
{
	public partial class PhotoViewController : UIViewController
	{
        public TodoItem Todo { get; set; }

        ImagePickerControllerDelegate imagePickerControllerDelegate;

		public PhotoViewController (IntPtr handle) : base (handle)
		{
		}
        public override void ViewDidLoad()
        {
            base.ViewDidLoad();

            // Configure UI
            CameraButton.Enabled = UIImagePickerController.IsSourceTypeAvailable(UIImagePickerControllerSourceType.Camera);
            GalleryButton.Enabled = UIImagePickerController.IsSourceTypeAvailable(UIImagePickerControllerSourceType.SavedPhotosAlbum);
            ClassificationLabel.Text = "Choose or take a photo...";

            // Configure Behavior
            imagePickerControllerDelegate = new ImagePickerControllerDelegate();
            imagePickerControllerDelegate.ErrorOccurred += (s, e) => ShowAlert("Processing Error", e.Value);
            imagePickerControllerDelegate.MessageUpdated += (s, e) => ShowMessage(e.Value);
            imagePickerControllerDelegate.ImagePicked += (s, e) =>
            {
                var img = UIImage.FromImage(e.Value);
                ShowImage(img);
                ClassifyImageAsync(img);
            };

            CameraButton.TouchUpInside += ShowCamera;
            GalleryButton.TouchUpInside += ShowGallery;
            CloseButton.TouchUpInside += (sender, e) => {
                Console.WriteLine("Close photo");
                DismissViewController(true, null);
            };
            SaveButton.TouchUpInside += (sender, e) => {
                Console.WriteLine("Save photo");
                DismissViewController(true, null);
            };

            // Configure Model
            model = new MachineLearningModel();
            model.PredictionsUpdated += (s, e) => ShowPrediction(e.Value);
            model.ErrorOccurred += (s, e) => ShowAlert("Processing Error", e.Value);
            model.MessageUpdated += (s, e) => ShowMessage(e.Value);
        }
        public override void ViewWillLayoutSubviews()
        {
            base.ViewWillLayoutSubviews();
            CameraButton.Layer.CornerRadius = CameraButton.Layer.Frame.Size.Width / 2;
            CameraButton.BackgroundColor = UIColor.FromRGB(0x5A, 0x86, 0x22); // 5A8622 dark-green
            CameraButton.ClipsToBounds = true;
            //CameraButton.setImage(UIImage(named: "your-image"), for: .normal)
            CameraButton.TranslatesAutoresizingMaskIntoConstraints = false;

            GalleryButton.Layer.CornerRadius = GalleryButton.Layer.Frame.Size.Width / 2;
            GalleryButton.BackgroundColor = UIColor.FromRGB(0x5A, 0x86, 0x22); // 5A8622 dark-green
            GalleryButton.ClipsToBounds = true;
            //GalleryButton.setImage(UIImage(named: "your-image"), for: .normal)
            GalleryButton.TranslatesAutoresizingMaskIntoConstraints = false;

            CloseButton.Layer.CornerRadius = CloseButton.Layer.Frame.Size.Width / 2;
            CloseButton.BackgroundColor = UIColor.FromRGB(0x5A, 0x86, 0x22); // 5A8622 dark-green
            CloseButton.ClipsToBounds = true;
            //CloseButton.setImage(UIImage(named: "your-image"), for: .normal)
            CloseButton.TranslatesAutoresizingMaskIntoConstraints = false;

            SaveButton.Layer.CornerRadius = SaveButton.Layer.Frame.Size.Width / 2;
            SaveButton.BackgroundColor = UIColor.FromRGB(0x5A, 0x86, 0x22); // 5A8622 dark-green
            SaveButton.ClipsToBounds = true;
            //SaveButton.setImage(UIImage(named: "your-image"), for: .normal)
            SaveButton.TranslatesAutoresizingMaskIntoConstraints = false;

            var safeGuide = View.SafeAreaLayoutGuide;
            NSLayoutConstraint.ActivateConstraints(new NSLayoutConstraint[] {
                CloseButton.TrailingAnchor.ConstraintEqualTo(safeGuide.TrailingAnchor, -23),
                CloseButton.BottomAnchor.ConstraintEqualTo(safeGuide.BottomAnchor, -13),
                CloseButton.WidthAnchor.ConstraintEqualTo(60),
                CloseButton.HeightAnchor.ConstraintEqualTo(60)
            });
            NSLayoutConstraint.ActivateConstraints(new NSLayoutConstraint[] {
                CameraButton.TrailingAnchor.ConstraintEqualTo(safeGuide.TrailingAnchor, -23 - (60+23)),
                CameraButton.BottomAnchor.ConstraintEqualTo(safeGuide.BottomAnchor, -13),
                CameraButton.WidthAnchor.ConstraintEqualTo(60),
                CameraButton.HeightAnchor.ConstraintEqualTo(60)
            });
            NSLayoutConstraint.ActivateConstraints(new NSLayoutConstraint[] {
                GalleryButton.TrailingAnchor.ConstraintEqualTo(safeGuide.TrailingAnchor, -23 - 2*(60+23)),
                GalleryButton.BottomAnchor.ConstraintEqualTo(safeGuide.BottomAnchor, -13),
                GalleryButton.WidthAnchor.ConstraintEqualTo(60),
                GalleryButton.HeightAnchor.ConstraintEqualTo(60)
            });
            NSLayoutConstraint.ActivateConstraints(new NSLayoutConstraint[] {
                SaveButton.TrailingAnchor.ConstraintEqualTo(safeGuide.TrailingAnchor, -23 - 3*(60+23)),
                SaveButton.BottomAnchor.ConstraintEqualTo(safeGuide.BottomAnchor, -13),
                SaveButton.WidthAnchor.ConstraintEqualTo(60),
                SaveButton.HeightAnchor.ConstraintEqualTo(60)
            });
        }
       

        void ShowCamera(object sender, EventArgs e)
        {
            // Is the camera available?
            if (!UIImagePickerController.IsSourceTypeAvailable(UIImagePickerControllerSourceType.Camera))
            {
                // No report to user and cancel
                ShowAlert("Not Supported", "Sorry but the saved photos album is not available on this iOS device.");
                return;
            }

            // Create a picker to get the camera image
            var picker = new UIImagePickerController()
            {
                Delegate = imagePickerControllerDelegate,
                SourceType = UIImagePickerControllerSourceType.Camera,
                CameraCaptureMode = UIImagePickerControllerCameraCaptureMode.Photo
            };

            // Display the picker
            PresentViewController(picker, true, null);
        }

        void ShowGallery(object sender, EventArgs e)
        {
            // Is the camera available?
            if (!UIImagePickerController.IsSourceTypeAvailable(UIImagePickerControllerSourceType.SavedPhotosAlbum))
            {
                // No report to user and cancel
                ShowAlert("Not Supported", "Sorry but the camera is not available on this iOS device.");
                return;
            }

            // Create a picker to get the camera image
            var picker = new UIImagePickerController()
            {
                Delegate = imagePickerControllerDelegate,
                SourceType = UIImagePickerControllerSourceType.SavedPhotosAlbum
            };

            // Display the picker
            PresentViewController(picker, true, null);
        }
    }
}
